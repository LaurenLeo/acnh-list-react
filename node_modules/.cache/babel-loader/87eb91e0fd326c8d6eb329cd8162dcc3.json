{"ast":null,"code":"var _jsxFileName = \"/Users/laurenleohner/Documents/GitHub/acnh-list-react/src/AnimalList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { AppBar, Toolbar, Grid, Card, CardContent, CircularProgress, CardMedia, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport mockData from \"./mockData\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  listContainer: {\n    paddingTop: '20px',\n    paddingLeft: '50px',\n    paddingRight: '50px'\n  },\n  cardMedia: {\n    margin: \"auto\"\n  },\n  cardContent: {\n    textAlign: \"center\"\n  }\n});\n\nconst AnimalList = props => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    history\n  } = props;\n  const [animalData, setAnimalData] = useState({}); //api request\n\n  useEffect(() => {\n    axios.get(`https://pokeapi.co/api/v2/pokemon?limit=807`).then(function (response) {\n      const {\n        data\n      } = response;\n      const {\n        results\n      } = data;\n      const newAnimalData = {};\n      results.forEach((animal, index) => {\n        newAnimalData[index + 1] = {\n          id: index + 1,\n          name: animal.name,\n          sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${index + 1}.png`\n        };\n      });\n      setAnimalData(newAnimalData);\n    });\n  }, []);\n\n  const getAnimalCard = animalId => {\n    const {\n      id,\n      name,\n      sprite\n    } = animalData[animalId];\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        onClick: () => history.push(`/${animalId}`),\n        children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n          className: classes.cardMedia,\n          image: sprite,\n          style: {\n            width: \"130px\",\n            height: \"130px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          className: classes.cardContent,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: `${id}. ${toFirstCharUppercase(name)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, animalId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), animalData ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      className: classes.listContainer,\n      children: Object.keys(animalData).map(animalId => getAnimalCard(animalId))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AnimalList, \"8iHmrjVSmpDmP8ALIgpvj8JXm1s=\", false, function () {\n  return [useStyles];\n});\n\n_c = AnimalList;\nexport default AnimalList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimalList\");","map":{"version":3,"sources":["/Users/laurenleohner/Documents/GitHub/acnh-list-react/src/AnimalList.js"],"names":["React","useState","useEffect","AppBar","Toolbar","Grid","Card","CardContent","CircularProgress","CardMedia","Typography","makeStyles","SearchIcon","mockData","toFirstCharUppercase","axios","useStyles","listContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","AnimalList","props","classes","history","animalData","setAnimalData","get","then","response","data","results","newAnimalData","forEach","animal","index","id","name","sprite","getAnimalCard","animalId","push","width","height","Object","keys","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACIC,MADJ,EAEIC,OAFJ,EAGIC,IAHJ,EAGUC,IAHV,EAIIC,WAJJ,EAKIC,gBALJ,EAMIC,SANJ,EAOIC,UAPJ,QAQO,mBARP;AASA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAC;AACzBM,EAAAA,aAAa,EAAE;AACXC,IAAAA,UAAU,EAAE,MADD;AAEXC,IAAAA,WAAW,EAAE,MAFF;AAGXC,IAAAA,YAAY,EAAE;AAHH,GADU;AAMzBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EAAE;AADD,GANc;AASzBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AATY,CAAD,CAA5B;;AAcA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,OAAO,GAAGX,SAAS,EAAzB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcF,KAApB;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8B7B,QAAQ,CAAC,EAAD,CAA5C,CAH0B,CAK1B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,KAAK,CACFgB,GADH,CACQ,6CADR,EAEGC,IAFH,CAEQ,UAAUC,QAAV,EAAoB;AACtB,YAAM;AAAEC,QAAAA;AAAF,UAAWD,QAAjB;AACA,YAAM;AAAEE,QAAAA;AAAF,UAAcD,IAApB;AACA,YAAME,aAAa,GAAG,EAAtB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC/BH,QAAAA,aAAa,CAACG,KAAK,GAAG,CAAT,CAAb,GAA2B;AACvBC,UAAAA,EAAE,EAAED,KAAK,GAAG,CADW;AAEvBE,UAAAA,IAAI,EAAEH,MAAM,CAACG,IAFU;AAGvBC,UAAAA,MAAM,EAAG,4EACPH,KAAK,GAAG,CACX;AALwB,SAA3B;AAOH,OARD;AASAT,MAAAA,aAAa,CAACM,aAAD,CAAb;AACH,KAhBH;AAiBH,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,QAAMO,aAAa,GAAIC,QAAD,IAAc;AAChC,UAAM;AAAEJ,MAAAA,EAAF;AAAMC,MAAAA,IAAN;AAAYC,MAAAA;AAAZ,QAAuBb,UAAU,CAACe,QAAD,CAAvC;AAEA,wBACA,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,OAAO,EAAI,MAAMhB,OAAO,CAACiB,IAAR,CAAc,IAAGD,QAAS,EAA1B,CAAvB;AAAA,gCACI,QAAC,SAAD;AACA,UAAA,SAAS,EAAEjB,OAAO,CAACN,SADnB;AAEA,UAAA,KAAK,EAAEqB,MAFP;AAGA,UAAA,KAAK,EAAE;AAAEI,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,MAAM,EAAE;AAA1B;AAHP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI,QAAC,WAAD;AAAa,UAAA,SAAS,EAAEpB,OAAO,CAACJ,WAAhC;AAAA,iCACI,QAAC,UAAD;AAAA,sBAAc,GAAEiB,EAAG,KAAI1B,oBAAoB,CAAC2B,IAAD,CAAO;AAAlD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,OAA+BG,QAA/B;AAAA;AAAA;AAAA;AAAA,YADA;AAcH,GAjBD;;AAmBA,sBACI;AAAA,4BACA,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAC,QAAjB;AAAA,6BACE,QAAC,OAAD;AAAA,+BACE;AAAA,kCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADA,EASCf,UAAU,gBACX,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAA4B,MAAA,SAAS,EAAEF,OAAO,CAACV,aAA/C;AAAA,gBACI+B,MAAM,CAACC,IAAP,CAAYpB,UAAZ,EAAwBqB,GAAxB,CAA4BN,QAAQ,IACnCD,aAAa,CAACC,QAAD,CADd;AADJ;AAAA;AAAA;AAAA;AAAA,YADW,gBAOP,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA,kBADJ;AAqBH,CAlED;;GAAMnB,U;UACcT,S;;;KADdS,U;AAoEN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n    AppBar, \n    Toolbar, \n    Grid, Card, \n    CardContent, \n    CircularProgress, \n    CardMedia,\n    Typography \n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport mockData from \"./mockData\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles({\n    listContainer: {\n        paddingTop: '20px',\n        paddingLeft: '50px',\n        paddingRight: '50px'\n    },\n    cardMedia: {\n        margin: \"auto\",\n    },\n    cardContent: {\n        textAlign: \"center\",\n    },\n})\n\nconst AnimalList = (props) => {\n    const classes = useStyles();\n    const { history } = props;\n    const [animalData, setAnimalData] = useState({});\n\n    //api request\n    useEffect(() => {\n        axios \n          .get(`https://pokeapi.co/api/v2/pokemon?limit=807`)\n          .then(function (response) {\n              const { data } = response;\n              const { results } = data;\n              const newAnimalData = {};\n              results.forEach((animal, index) => {\n                  newAnimalData[index + 1] = {\n                      id: index + 1,\n                      name: animal.name,\n                      sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\n                        index + 1\n                    }.png`,\n                  };\n              });\n              setAnimalData(newAnimalData);\n          });\n    }, []);\n\n    const getAnimalCard = (animalId) => {\n        const { id, name, sprite } = animalData[animalId];\n\n        return(\n        <Grid item xs={12} sm={4} key={animalId}>\n            <Card onClick = {() => history.push(`/${animalId}`)}>\n                <CardMedia \n                className={classes.cardMedia}\n                image={sprite}\n                style={{ width: \"130px\", height: \"130px\" }}\n                />\n                <CardContent className={classes.cardContent}>\n                    <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>\n                </CardContent>\n            </Card>\n        </Grid>\n        );\n    };\n\n    return (\n        <>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <div>\n                <SearchIcon />\n                <TextField />\n            </div>\n        </Toolbar>        \n        </AppBar>\n        {animalData ? (\n        <Grid container spacing={2} className={classes.listContainer}>\n           {Object.keys(animalData).map(animalId =>\n             getAnimalCard(animalId)\n            )}\n        </Grid>\n        ) : (\n            <CircularProgress />\n        )}\n        </>\n    );\n};\n\nexport default AnimalList;"]},"metadata":{},"sourceType":"module"}