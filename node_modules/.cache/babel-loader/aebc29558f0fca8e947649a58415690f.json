{"ast":null,"code":"var _jsxFileName = \"/Users/laurenleohner/Downloads/animal-list-react/src/AnimalList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AppBar, Toolbar, Grid, Card, CardContent, CircularProgress, CardMedia, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport mockData from \"./mockData\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  listContainer: {\n    paddingTop: '20px',\n    paddingLeft: '50px',\n    paddingRight: '50px'\n  },\n  cardMedia: {\n    margin: \"auto\"\n  },\n  cardContent: {\n    textAlign: \"center\"\n  }\n});\n\nconst AnimalList = props => {\n  _s();\n\n  const {\n    history\n  } = props;\n  const classes = useStyles();\n  const [animalData, setAnimalData] = useState(mockData);\n\n  const getAnimalCard = animalId => {\n    console.log(animalData[`${animalId}`]);\n    const {\n      id,\n      name\n    } = animalData[`${animalId}`];\n    const sprite = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${animalId}.png`;\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        onClick: () => history.push(`/${animalId}`),\n        children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n          className: classes.cardMedia,\n          image: sprite,\n          style: {\n            width: \"130px\",\n            height: \"130px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          className: classes.cardContent,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: `${id}. ${toFirstCharUppercase(name)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)\n    }, animalId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), animalData ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      className: classes.listContainer,\n      children: Object.keys(animalData).map(animalId => getAnimalCard(animalId))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AnimalList, \"Pf4CEpbDk8gXLDKAAQWbjj3adXU=\", false, function () {\n  return [useStyles];\n});\n\n_c = AnimalList;\nexport default AnimalList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimalList\");","map":{"version":3,"sources":["/Users/laurenleohner/Downloads/animal-list-react/src/AnimalList.js"],"names":["React","useState","AppBar","Toolbar","Grid","Card","CardContent","CircularProgress","CardMedia","Typography","makeStyles","mockData","toFirstCharUppercase","useStyles","listContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","AnimalList","props","history","classes","animalData","setAnimalData","getAnimalCard","animalId","console","log","id","name","sprite","push","width","height","Object","keys","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { \n    AppBar, \n    Toolbar, \n    Grid, Card, \n    CardContent, \n    CircularProgress, \n    CardMedia,\n    Typography \n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport mockData from \"./mockData\";\nimport { toFirstCharUppercase } from \"./constants\";\n\nconst useStyles = makeStyles({\n    listContainer: {\n        paddingTop: '20px',\n        paddingLeft: '50px',\n        paddingRight: '50px'\n    },\n    cardMedia: {\n        margin: \"auto\",\n    },\n    cardContent: {\n        textAlign: \"center\",\n    },\n})\n\nconst AnimalList = (props) => {\n    const { history } = props;\n    const classes = useStyles();\n    const [animalData, setAnimalData] = useState(mockData);\n\n    const getAnimalCard = (animalId) => {\n        console.log(animalData[`${animalId}`]);\n        const { id, name } = animalData[`${animalId}`];\n        const sprite = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\n            animalId\n          }.png`;\n\n        return(\n        <Grid item xs={12} sm={4} key={animalId}>\n            <Card onClick = {() => history.push(`/${animalId}`)}>\n                <CardMedia \n                className={classes.cardMedia}\n                image={sprite}\n                style={{ width: \"130px\", height: \"130px\" }}\n                />\n                <CardContent className={classes.cardContent}>\n                    <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>\n                </CardContent>\n            </Card>\n        </Grid>\n        );\n    };\n\n    return (\n        <>\n        <AppBar position=\"static\">\n            <Toolbar />\n        </AppBar>\n        {animalData ? (\n        <Grid container spacing={2} className={classes.listContainer}>\n           {Object.keys(animalData).map(animalId =>\n             getAnimalCard(animalId)\n            )}\n        </Grid>\n        ) : (\n            <CircularProgress />\n        )}\n        </>\n    );\n};\n\nexport default AnimalList;"]},"metadata":{},"sourceType":"module"}